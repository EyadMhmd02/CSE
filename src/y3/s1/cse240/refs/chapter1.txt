(1) Programming paradigms:

- Imperative (Procedural):
    - manipulation of data in stepwise fashion.
    - stored program concept-based.
    - e.g.: assembly, Fortran, Algol, Ada, Pascal, C.

- Object-Oriented:
    - same as imperative, but organized into classes of objects.
    - features: inheritance, hierarchy, polymorphism.
    - e.g.: Smalltalk, C++, Java, C#.

- Functional (Applicative):
    - mathematical functions.
    - no stored data.
    - data is passed as parameters in functions.
    - based on lambda calculus.
    - e.g.: ML, SML, Lisp/Scheme.

- Logic (Declarative):
    - facts, rules and questions.
    - compare a question to each fact and rule and rule-base.
    - match => yes answer, no match => no answer.
    - e.g.: Prolog.

Many languages belong to multiple paradigms:
- e.g.:
    - C++ is OO but has all features of C, thus also imperative.
    - Java is OO but has some imperative features (primitive types don't obtain memory from the language heap like other objects).
    - Lisp contains many non-functional features.
    - Prolog's arithmetic operations are based on imperative paradigm.

(2) Program performance and features of programming langs:

Programming language features:
- Simplicity (Orthogonality)
- Control structures.
- Data types, Data structures.
- Syntax design. (--Readability/Reusability)
- Abstraction.
- Expressiveness. (--Writability)
- Strong checking (Type equivalence). (--Reliability)
- Restricted aliasing.
- Exception handling.

Program's performance:
- Efficiency.
- Readability/Reusability.
- Writability.
- Reliability.

(3) Structures of Programming Languages

1- Lexical Structure:

    Vocabulary

    - Identifiers:  names chosen by programmers.
        ↓
    int n1 = 3;
            ↓
    String name = "Eyad";

    - Keywords:     names reserved by programming language.
    ↓
    int n1 = 3;
    ↓
    String name = "Eyad";

    - Operators:    symbols represent operations. (arithmetic: +-*/%) (relational: < <= == >= >) (logic: AND OR NOT).

    - Separators:   symbols separate lexical or syntactic structures. (space ) (comma,) (colon:) (semicolon;) (parentheses())

    - Literals:     values assigned to variables.
             ↓
    int n1 = 3;
                  ↓
    String name = "Eyad";
              ↓
    float n = 3.5f;
                ↓
    double n2 = 1.3;

    - Comments:     explanatory text. (starts with a specific keyword or operator) (ignored when program is translated)

    // this is a single line comment

    /* this is a block comment */


2- Syntactic Structure:

    Grammar

    - Assignments:              assigns a literal or exp to var. (=)
          ↓
    int n = 3;

    - Conditional Statements:   tests condition => branches to statements based on test result (true/false). (if-then) (if-then-else) (switch)

    - Loop Statement:
        test condition => enter/exit body of loop based on condition (true/false).
        (for) (while) (do-while).


3- Contextual Structure:
    - Variable declaration.
    - Initialization.
    - Type checking.

    String str = "Hello";
    int i = 0;
    int j = i + str;

    Lexical ✔
    Contextual ✘

4- Semantic Structure:
    Meaning of program. (What the program does during the execution).

5- BNF Notation:
    Define lexical+syntactic structures.

    <sentence>  ::= <subject><verb><object>
    <subject>   ::= <noun> | <article><noun> | <adjective><noun> | <article><adjective><noun>
    <adjective> ::= <adjective> | <adjective><adjective>
    <object>    ::= <subject>
    <noun>      ::= table | horse | computer
    <article>   ::= the | a
    <adjective> ::= big | fast | good | high
    <verb>      ::= is | makes

    <letter>    ::= a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
    <digit>     ::= O | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    <symbol>    ::= _ | @ | . | ~ | ? | # | $
    <char>      ::= <letter> | <digit> | <symbol>
    <operator>  ::= + | - | * | / | % | < | > | == | <= | >= | and | or | not
    <identifier>::= <letter>|<identifier><char>
    <number>    ::= <digit>|<number><digit>
    <item>      ::= <identifier>|<number>
    <expression>::= <item>|(<expression>)|<expression><operator><expression>
    <branch>    ::= if <expr>then {<block>} | if <expr>then {<block>}else {<block>}
    <switch>    ::= switch<expr>{<sbody>}
    <sbody>     ::= <cases> | <cases>; default :<block>
    <cases>     ::= case<value>:<block> | <cases> ; case<value>:<block>
    <loop>      ::= while <expr>do {<block>}
    <assignment>::= <identifier>=<expression>;
    <statement> ::= <assignment>|<branch>|<loop>
    <block>     ::= <statement>|<block>;<statement>

6- Syntax Graph:
    Because BNF notation can be hard to understand, we use graphic form called Syntax Graph.


(4) Data types and type equivalence: 1.3.1 Data types and type equivalence.c

(5) Type checking and conversions: 1.3.2 Type checking and conversions.c

(6) Orthogonality: 1.3.3 Orthogonality.c