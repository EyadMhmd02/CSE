- ordered.

- each node has 0, 1 or 2 children.

- 1st child called LEFT, 2nd child RIGHT.
            0
           / \
          1   4
         / \ / \
        2  3 5  6

- LEFT subtree: rooted at LEFT child.

- RIGHT subtree: rooted at RIGHT child.

- BALANCED binary tree: If height == h: if all leaf nodes are at level h or h - 1

- FULL binary tree: each node is LEAF (0 children) or has 2 children.

- Check if full:
    Method boolean isFull(Node root) {
        if(root.isLeaf()) return true;

        boolean leftFull = false;
        boolean rightFull = false;

        if(root.hasLeftChild()) {
            leftFull = isFull(root.leftChild);
        }

        if(root.hasRightChild()) {
            rightFull = isFull(root.rightChild);
        }

        return leftFull && rightFull;
    }

- COMPLETE binary tree: height == h: all levels are completely full, except LAST (if not full => all nodes LEFT side).