Begin recursiveBinarySearch(In: List<T> list; In: T key; In: low; In: high) â†’ Int
    If low > high Then
        Return NOT_FOUND
    End If
    middle := (low + high) / 2
    If key = listmiddle Then
        Return middle
    ElseIf key < listmiddle Then
        Return recursiveBinarySearch(list, key, low, middle - 1)
    Else
        Return recursiveBinarySearch(list, key, middle + 1, high)
    End If
End recursiveBinarySearch

n => size of list being searched

worst case: key not found

c(n) will be proportional to the number of recursive calls, so all we need to do to find c(n) is
determine the number of recursive calls.

Call        List size       Comparisons
1           n               1
2           n/2             1
3           n/4             1
...         ...             ...
k-1         n/(2^(k-2))     1
k           0               0

what is k-1?
Since n is a power of 2 (by our assumption),
on call k-1 the list size will be 1.
Thus:
n / (2^(k - 2)) = 1
Solving for k:
n = 2^(k - 2)
lg n = lg (2^(k - 2))
k - 1 = (lg n) + 1 = c(n).

