- Abstract Data Types (ADT): a data type represented in the terms of operations, and whose internal representation is hidden.

- Naturally defined by objects, but adds emphasis on abstraction.

- A user of ADT is meant to be isolated from its implementation (e.g.: internal presentation). They should care only for the behavior that is exposed (via an API).

- Rather than rely on a class/object view of ADTs, we can think in terms of operations happening over types (just data):
    - add:Point2D * Point2D -> Point2D
    - sub:Point2D * Point2D -> Point2D
    - getX:Point2D -> double
    - getDistance:Point2D * Point2D -> double
    - equals:Point2D * Point2D -> bool

- ADTs have two basic operations:
    - Transformations: regenerate the original type. (e.g.: add)
    - Extractors: extract information from the internal state. (e.g.: getX)

- ADTs can be implemented using classes, but the main idea is to hide the implementation, and expose only the operations.

- Since ADTs are implemented by classes, they use all the operations that are defined for classes. Of interest:
    - Creation: LinkedStack stack = new LinkedStack();
    - Invoke behavior: stack.push(5);
    - Copy operations (=) work in terms of references as objets.

- ADTs vs Classes:
    - ADTs are abstract, classes are concrete.
    - Classes have no restrictions.
    - Purely a design difference - not enforced with syntax in Java.

- ADTs vs Abstract Classes:
    - ADTs are meant to be implemented, abstract classes are meant to be extended.
    - ADTs are meant to be used as a type, abstract classes are meant to be used as a base class.

- Further reading:
    - Point2D (immutable).
    - Interval1D.
    - Interval2D.
    - Date (example of a practical ADT).
    - Transaction.
    - Accumulator (online: example of a mutable ADT).
    - Strings (example of an ADT that you have used).